/*
 * Copyright (c) Mirth Corporation. All rights reserved.
 * 
 * http://www.mirthcorp.com
 * 
 * The software in this package is published under the terms of the MPL license a copy of which has
 * been included with this distribution in the LICENSE.txt file.
 */

package com.mirth.connect.client.ui;

import java.awt.Color;
import java.awt.Cursor;
import java.awt.Dimension;
import java.awt.Point;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.util.Arrays;
import java.util.Calendar;
import java.util.Map.Entry;

import javax.swing.BorderFactory;
import javax.swing.JCheckBox;
import javax.swing.JComponent;
import javax.swing.JDialog;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.JTable;
import javax.swing.JTextField;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableModel;

import org.jdesktop.swingx.JXTable;
import org.jdesktop.swingx.treetable.DefaultTreeTableModel;

import com.mirth.connect.client.ui.codetemplate.CodeTemplatePanel;
import com.mirth.connect.client.ui.codetemplate.CodeTemplateRootTreeTableNode;
import com.mirth.connect.client.ui.codetemplate.CodeTemplateTreeTableModel;
import com.mirth.connect.client.ui.components.ChannelInfo;
import com.mirth.connect.client.ui.components.MirthCheckBox;
import com.mirth.connect.client.ui.components.MirthTable;
import com.mirth.connect.client.ui.components.MirthTreeTable;
import com.mirth.connect.client.ui.util.DisplayUtil;

import net.miginfocom.swing.MigLayout;

/** Creates the About Mirth dialog. The content is loaded from about.txt. */
public class DeployInDebugMode extends MirthDialog {

    private static final int LIBRARY_CHANNELS_NAME_COLUMN = 1;

    private Frame parent;
    private JPanel deployInDebugPanel;
    private MirthTreeTable deployInDebugChannelsTable;
    private JPanel deployInDebugRightPanel;
    private JPanel deployInDebugChannelsSelectPanel;
    private JLabel deployInDebugChannelsLabel;
    private JLabel deployInDebugChannelsSelectAllLabel;
    private JLabel deployInDebugChannelsDeselectAllLabel;
    private JLabel deployInDebugChannelsFilterLabel;
    private JTextField deployInDebugChannelsFilterField;
    private JScrollPane deployInDebugChannelsScrollPane;
    private Color borderColor = new Color(110, 110, 110);
    /** Creates new form AboutMirth */
    public DeployInDebugMode() {
        super(PlatformUI.MIRTH_FRAME);
//        this.parent = PlatformUI.MIRTH_FRAME;
        initComponents();
        
//        add(deployUndeploy);
//        add(deployUndeploy1);
////        add(deployUndeploy2);
        loadContent();
//        aboutContent.setCaretPosition(0);
        setDefaultCloseOperation(DISPOSE_ON_CLOSE);
        DisplayUtil.setResizable(this, false);
        setPreferredSize(new Dimension(400, 300));
        setModal(true);
        pack();

        // If this is being called from the LoginPanel, parent may be null
        if (parent == null) {
            setLocationRelativeTo(null);
        } else {
            Dimension dlgSize = getPreferredSize();
            Dimension frmSize = parent.getSize();
            Point loc = parent.getLocation();

            if ((frmSize.width == 0 && frmSize.height == 0) || (loc.x == 0 && loc.y == 0)) {
                setLocationRelativeTo(null);
            } else {
                setLocation((frmSize.width - dlgSize.width) / 2 + loc.x, (frmSize.height - dlgSize.height) / 2 + loc.y);
            }
        }

        setVisible(true);
    }

    /** Loads the contents of about.txt */
    public void loadContent() {

    }

    /**
     * This method is called from within the constructor to initialize the form. WARNING: Do NOT
     * modify this code. The content of this method is always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc=" Generated Code
    // <editor-fold defaultstate="collapsed" desc=" Generated Code
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    // @formatter:off
    
   

    private void initComponents() {
        

        headerListPanel = new JPanel();
        headerListPanel.setBorder(BorderFactory.createTitledBorder("Debug Channel"));
        deployUndeploy = new JCheckBox("deployUndeploy message");
         //switchPanel();

    
        TableModel model = new DeployInDebugEntity();
    
        JTable libraryChannelsTable = new JTable(model);
        libraryChannelsTable.getColumnModel().setColumnMargin(0);
        JLabel label=new JLabel("Select channel script to debug");
        
        JLabel libraryChannelsSelectAllLabel = new JLabel("<html><u>Select All</u></html>");
        libraryChannelsSelectAllLabel.setForeground(Color.BLUE);
        libraryChannelsSelectAllLabel.setCursor(new Cursor(Cursor.HAND_CURSOR));
       libraryChannelsSelectAllLabel.addMouseListener(new MouseAdapter() {
            public void mouseReleased(MouseEvent evt) {
                if (evt.getComponent().isEnabled()) {
                    for (int row = 0; row < libraryChannelsTable.getRowCount(); row++) {
                        ChannelInfo channelInfo = (ChannelInfo) libraryChannelsTable.getValueAt(row, LIBRARY_CHANNELS_NAME_COLUMN);
                        channelInfo.setEnabled(true);
                        libraryChannelsTable.setValueAt(channelInfo, row, LIBRARY_CHANNELS_NAME_COLUMN);
                    }
                    setEnabled(true);
                }
            }
        });

        JLabel libraryChannelsDeselectAllLabel = new JLabel("<html><u>Deselect All</u></html>");
        libraryChannelsDeselectAllLabel.setForeground(Color.BLUE);
        libraryChannelsDeselectAllLabel.setCursor(new Cursor(Cursor.HAND_CURSOR));
       /* libraryChannelsDeselectAllLabel.addMouseListener(new MouseAdapter() {
            public void mouseReleased(MouseEvent evt) {
                if (evt.getComponent().isEnabled()) {
                    for (int row = 0; row < libraryChannelsTable.getRowCount(); row++) {
                        ChannelInfo channelInfo = (ChannelInfo) libraryChannelsTable.getValueAt(row, LIBRARY_CHANNELS_NAME_COLUMN);
                        channelInfo.setEnabled(false);
                        libraryChannelsTable.setValueAt(channelInfo, row, LIBRARY_CHANNELS_NAME_COLUMN);
                    }
                    setEnabled(true);
                }
            }
        });*/
        headerListPanel.add(label);
        headerListPanel.add(libraryChannelsSelectAllLabel);
        headerListPanel.add(libraryChannelsDeselectAllLabel);
               JScrollPane scrollPane = new JScrollPane(libraryChannelsTable);
        headerListPanel.add(scrollPane);
        add(headerListPanel);
   
        pack();
    }// </editor-fold>//GEN-END:initComponents
    // @formatter:on

    public void switchPanel() {
        
     /*   Object data[][] = { { Boolean.FALSE,"Deploy/Undeploy" }, { Boolean.FALSE,"Batch"}, {  Boolean.FALSE ,"Source Connector"},
                { Boolean.FALSE  ,"Destination Filter"}, {  Boolean.FALSE ,"Destination Connector"},};
        String[] columnNames = { "", "" };
        DebugTableModel model = new DebugTableModel(data, columnNames);
        JXTable table = new JXTable(model);
        table.setSortable(true);
        table.getColumnModel().getColumn(0).setPreferredWidth(100);
        table.getColumnModel().getColumn(1).setPreferredWidth(200);
        JScrollPane scrollPane = new JScrollPane(table);
        headerListPanel.add(scrollPane);
        add(headerListPanel);
*/
        
        TableModel model = new DebugTableModel();
        System.out.println("Inside swithc opanel");
        JTable libraryChannelsTable = new JTable(model);
        System.out.println(libraryChannelsTable.getRowCount());
        Object[][] data = DebugTableModel.data;
        data[0][0] = new ChannelInfo(NEW_CHANNELS, false);
        data[0][1] = NEW_CHANNELS;
        int row = 0;

        for (Object[] dataVal : DebugTableModel.data) {
            data[row][0] = new ChannelInfo(dataVal.toString(), false);
            data[row][1] = dataVal;
            System.out.println(dataVal.toString());
            row++;
        }

        ((DebugTableModel) libraryChannelsTable.getModel()).refreshDataVector(data);

        //parent.setBold(parent.viewPane, UIConstants.ERROR_CONSTANT);
        ////parent.setPanelName("Debug Channgel");
            headerListPanel.add(libraryChannelsTable);
            add(headerListPanel);
    }

       private void jButton1ActionPerformed(java.awt.event.ActionEvent evt)// GEN-FIRST:event_jButton1ActionPerformed
    {// GEN-HEADEREND:event_jButton1ActionPerformed
        this.dispose();
    }// GEN-LAST:event_jButton1ActionPerformed
     // Variables declaration - do not modify//GEN-BEGIN:variables
    public static final String NEW_CHANNELS = "Debug Channel";
    private javax.swing.JTextPane aboutContent;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private com.mirth.connect.client.ui.MirthHeadingPanel mirthHeadingPanel1;
    private JCheckBox deployUndeploy;
    private MirthCheckBox deployUndeploy1;
    
    private JPanel headerListPanel;
    private JFrame deployFrame;
    
    // End of variables declaration//GEN-END:variables
}
